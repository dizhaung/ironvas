/*
 * Project: ironvas
 * Package: de.fhhannover.inform.trust.ironvas
 * File:    VulnerabilityHandlerTest.java
 *
 * Copyright (C) 2011-2012 Hochschule Hannover
 * Ricklinger Stadtweg 118, 30459 Hannover, Germany 
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.fhhannover.inform.trust.ironvas;

import java.util.HashSet;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;

import de.fhhannover.inform.trust.ifmapj.channel.SSRC;
import de.fhhannover.inform.trust.ifmapj.exception.IfmapErrorResult;
import de.fhhannover.inform.trust.ifmapj.exception.IfmapException;
import de.fhhannover.inform.trust.ifmapj.messages.PublishRequest;
import de.fhhannover.inform.trust.ironvas.converter.Converter;

import static org.mockito.Mockito.*;

public class VulnerabilityHandlerTest {
	
	private VulnerabilityHandler handler;
	private SSRC ssrc;
	private Converter converter;

	@Before
	public void setUp() {
		ssrc = mock(SSRC.class);
		converter = mock(Converter.class);
		
		handler = new VulnerabilityHandler(ssrc, converter);
	}
	
	@Test
	public void testPublishEmptySets() throws IfmapErrorResult, IfmapException {
		Set<Vulnerability> news = new HashSet<Vulnerability>();
		Set<Vulnerability> outDated = new HashSet<Vulnerability>();
		
		handler.publish(news, outDated);

		verify(converter, never()).toUpdates(anySet());
		verify(converter, never()).toDeletes(anySet());
		
		verify(ssrc, never()).publish(any(PublishRequest.class));
	}
	
	@Test
	public void testPublishEmptyNews() throws IfmapErrorResult, IfmapException {
		Set<Vulnerability> news = new HashSet<Vulnerability>();
		Set<Vulnerability> outDated = new HashSet<Vulnerability>();
		outDated.add(mock(Vulnerability.class));
		
		handler.publish(news, outDated);

		verify(converter, never()).toUpdates(anySet());
		verify(converter, times(1)).toDeletes(outDated);
		
		verify(ssrc, times(1)).publish(any(PublishRequest.class));
	}
	
	@Test
	public void testPublishEmptyOutDated() throws IfmapErrorResult, IfmapException {
		Set<Vulnerability> news = new HashSet<Vulnerability>();
		Set<Vulnerability> outDated = new HashSet<Vulnerability>();
		news.add(mock(Vulnerability.class));
		
		handler.publish(news, outDated);

		verify(converter, times(1)).toUpdates(news);
		verify(converter, never()).toDeletes(anySet());
		
		verify(ssrc, times(1)).publish(any(PublishRequest.class));
	}
	
	@Test
	public void testPublish() throws IfmapErrorResult, IfmapException {
		Set<Vulnerability> news = new HashSet<Vulnerability>();
		Set<Vulnerability> outDated = new HashSet<Vulnerability>();
		news.add(mock(Vulnerability.class));
		outDated.add(mock(Vulnerability.class));
		
		handler.publish(news, outDated);

		verify(converter, times(1)).toUpdates(news);
		verify(converter, times(1)).toDeletes(outDated);
		
		verify(ssrc, times(1)).publish(any(PublishRequest.class));
	}
	
	@Test
	public void testUpdateCache() throws IfmapErrorResult, IfmapException {
		String taskId = "a39b37dd-0fde-4774-b557-30c12df483e6";
		
		Set<Vulnerability> news = new HashSet<Vulnerability>();
		Set<Vulnerability> outDated = new HashSet<Vulnerability>();
		
		Vulnerability newVulnerability = mock(Vulnerability.class);
		Vulnerability outDatedVulnerability = mock(Vulnerability.class);
		news.add(newVulnerability);
		outDated.add(outDatedVulnerability);
		
		VulnerabilityCache cache = mock(VulnerabilityCache.class);
		VulnerabilityHandler h =
				new VulnerabilityHandlerShunt(ssrc, converter, cache);
		
		h.updateCache(taskId, news, outDated);
		
		verify(cache, times(1)).removeFromTask(taskId, outDated);
		verify(cache, times(1)).addToTask(taskId, news);
	}
	
	class VulnerabilityHandlerShunt extends VulnerabilityHandler {

		public VulnerabilityHandlerShunt(
				SSRC ifmap,
				Converter converter,
				VulnerabilityCache cache) {
			super(ifmap, converter);
			this.cache = cache;
		}
		
	}
}
