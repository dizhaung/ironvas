/*
 * Project: ironvas
 * Package: main.scala.de.fhhannover.inform.trust.ironvas.omp
 * File:    VulnerabilityFetcher.scala
 *
 * Copyright (C) 2011-2012 Hochschule Hannover
 * Ricklinger Stadtweg 118, 30459 Hannover, Germany 
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.fhhannover.inform.trust.ironvas.omp

import java.util.logging.Logger

import scala.collection.JavaConversions.asJavaList
import scala.collection.mutable.HashSet

import de.fhhannover.inform.trust.ironvas.Report
import de.fhhannover.inform.trust.ironvas.VulnerabilityHandler

/**
 * A <code>VulnerabilityFetcher</code> is responsible for periodically getting
 * scan reports from on OpenVAS server.
 * 
 * @author Ralf Steuerwald
 * 
 * @constructor creates a new <code>VulnerabilityFetcher</code>
 * @param handler  the <code>VulnerabilityHandler</code> which is responsible
 *                 for processing the vulnerabilities
 * @param omp      the <code>OmpConnection</code> used for executing OMP requests
 * @param interval the time to wait between two fetch operations in seconds
 */
class VulnerabilityFetcher(
        handler: VulnerabilityHandler,
        omp: OmpConnection,
        interval: Int) extends Runnable {
    
    private val logger = Logger.getLogger(getClass().getName())
    
    private val seenTasks = new HashSet[Task]
    
    /**
     * Run the fetch loop. The following steps are performed:
     * 
     * 1. Get the latest reports of all tasks from the OpenVAS server.
     * 2. For every latest report:
     *    2.1. Get all vulnerabilities of that report from the OpenVAS server.
     *    2.2. Send the list of vulnerabilities to the VulnerabilityHandler
     * 3. Sleep a given interval.
     * 4. Start at 1. again.
     */
    override def run(): Unit = {
        logger.info("starting " + getClass().getSimpleName())
        
        try {
	        while (!Thread.currentThread().isInterrupted()) {
	        	val (_, currentTasks) = omp.getTasks()
	        	val deletedTasks = seenTasks diff currentTasks.toSet 
	        	
	        	if (deletedTasks.size > 0) {
	        		logger.fine("tasks %s not longer present on the openvas server".format(deletedTasks))
	        		
	        		for (task <- deletedTasks) {
	        			val emptyReport = new Report(task.id, asJavaList(Nil))
	        			handler.submit(emptyReport)
	        			
	        			seenTasks -= task
	        		}
	        	}

	        	val latestReports = omp.getLatestReports()
	        	logger.info("found " + latestReports.length + " reports")

	        	for ((task, vulnerabilities) <- latestReports) {
	        	  val lastReport = new Report(task.id, asJavaList(vulnerabilities))
	        	  handler submit lastReport
	        	  
	        	  seenTasks += task
	        	}
	            
	            Thread.sleep(interval * 1000)
	        }
        } catch {
            case e: InterruptedException => {
                Thread.currentThread().interrupt();
                logger.info("wakup by interrupt signal, exiting ...")
            }
        }
        finally {
            logger.info("shutdown complete.")
        }
    }
}
