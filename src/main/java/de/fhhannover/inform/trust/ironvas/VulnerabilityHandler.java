package de.fhhannover.inform.trust.ironvas;

import java.util.List;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Logger;

import de.fhhannover.inform.trust.ifmapj.channel.SSRC;
import de.fhhannover.inform.trust.ifmapj.exception.IfmapErrorResult;
import de.fhhannover.inform.trust.ifmapj.exception.IfmapException;
import de.fhhannover.inform.trust.ifmapj.messages.PublishElement;
import de.fhhannover.inform.trust.ifmapj.messages.PublishRequest;
import de.fhhannover.inform.trust.ifmapj.messages.Requests;
import de.fhhannover.inform.trust.ironvas.converter.Converter;

/**
 * The <code>VulnerabilityHandler</code> is responsible for publishing and
 * managing vulnerabilities.
 * 
 * @author Ralf Steuerwald
 *
 */
public class VulnerabilityHandler implements Runnable {
	
	private static final Logger logger =
			Logger.getLogger(VulnerabilityHandler.class.getName());

	private LinkedBlockingQueue<Report> workQueue =
			new LinkedBlockingQueue<Report>();
	
	private VulnerabilityCache cache = new VulnerabilityCache();

	private SSRC ssrc;
	private Converter converter;

	public VulnerabilityHandler(SSRC ifmap, Converter converter) {
		this.ssrc = ifmap;
		this.converter = converter;
	}

	/**
	 * Run the handler loop. The following steps are performed:
	 * <p>
	 * 1. Wait for new vulnerabilities in the queue.<br>
	 * 2. If new vulnerabilities arrive:<br>
	 *    2.1. Check the arrived set for new vulnerabilities, not known in the
	 *         cache.<br>
	 *    2.2. Check the cache for out-dated vulnerabilities.<br>
	 *    2.3. Remove the out-dated vulnerabilities from the cache.<br>
	 *    2.4. Add the new vulnerabilities to the cache.<br>
	 *    2.5. Send a publish request to the MAPS including update elements
	 *         for the new and delete elements for the out-dated vulnerabilities.
	 * 3. Start at 1. again.
	 */
	@Override
	public void run() {
		logger.info("starting " + this.getClass().getSimpleName());
		
		try {
			while (!Thread.currentThread().isInterrupted()) {
				Report lastReport = workQueue.take();
				
				String id = lastReport.taskId;
				List<Vulnerability> vulns = lastReport.vulnerabilities;
				
				logger.fine("processing " + vulns.size() + " vulnerabilities for taskId " + id);
				
				Set<Vulnerability> news = cache.indicateNew(id, vulns);
				logger.info(String.format("found %d new vulnerabilities", news.size()));
				
				Set<Vulnerability> outDated = cache.indicateOutDated(id, vulns);
				logger.info(String.format("found %d probably out-dated vulnerabilities", outDated.size()));

				cache.removeFromTask(id, outDated);
				cache.addToTask(id, news);
				
				PublishRequest request = Requests.createPublishReq();

				if (news.size() > 0) {
					List<PublishElement> update = converter.toUpdates(news);
					mergeInto(update, request);
				}
				if (outDated.size() > 0) {
					List<PublishElement> delete = converter.toDeletes(outDated);
					mergeInto(delete, request);
				}

				if (news.size() > 0 || outDated.size() > 0) {
					try {
						logger.info(String.format(
								"publishing %d updates, %d deletes",
								news.size(), outDated.size()));
						ssrc.publish(request);
						
						// TODO in case of an ifmap exception the current request should be saved and resend with the next one (or an  immediately retry)
					} catch (IfmapErrorResult e) {
						logger.warning("error while sending publish request " + e);
					} catch (IfmapException e) {
						logger.warning("error while sending publish request " + e);
					}
				}
			}
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			logger.info("got interrupt signal while waiting for new work, exiting ...");
		}
		finally{
			logger.info("shutdown complete.");
		}
	}

	/**
	 * Submit a list of vulnerabilities to this {@link VulnerabilityHandler}.
	 * 
	 * @param lastReport the {@link Report} containing the vulnerabilities
	 */
	public void submit(Report lastReport) {
		try {
			workQueue.put(lastReport);
		} catch (InterruptedException e) {
			logger.severe(
					"could not submit vulnerabilities to handler "
					+ e.getMessage());
		}
	}

	private <T extends PublishElement> void mergeInto(List<T> elements,
			PublishRequest request) {
		for (T t : elements) {
			request.addPublishElement(t);
		}
	}
	
}
